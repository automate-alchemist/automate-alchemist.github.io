---
title: "PyTest Setup Guide For Automation Project"
excerpt: "In the below article setting up pytest framework for automation project is being discussed in detail."
collection: testing-mindspace
---






# Setting Up Pytest for Your Automation Project

Pytest is a powerful testing framework for Python, widely used for functional and API testing. Its simplicity, scalability, and rich plugin ecosystem make it an excellent choice for test automation.

In this guide, I will walk you through setting up Pytest, configuring your test suite, structuring your project, and running tests effectively. The folder structure you shared from GitHub will serve as a reference to help align with real-world implementations.

---

## 1. Installing Pytest

Before setting up Pytest, ensure you have Python installed. If not, download and install Python from the [official website](https://www.python.org/downloads/).

To install Pytest, run the following command:

```sh
pip install pytest
```

To verify the installation, check the version:

```sh
pytest --version
```

---

## 2. Project Structure

A well-structured project improves maintainability. Based on your provided folder structure, here is an ideal setup for a Pytest-based automation framework:

```
project-root/
│── tests/
│   ├── test_admin.py
│   ├── test_dashboard.py
│   ├── test_delete_employee.py
│   ├── test_e2e.py
│   ├── test_employee_management.py
│   ├── conftest.py
│   ├── __init__.py
│
│── utilities/
│   ├── BaseClass.py
│   ├── __init__.py
│   ├── logfile.log
│
│── TestData/
│   ├── AdminData.py
│   ├── DeleteEmployeeData.py
│   ├── EmployeeManagementData.py
│   ├── __init__.py
│
│── pageObjects/
│   ├── Admin.py
│   ├── Dashboard.py
│   ├── Delete_Employee.py
│   ├── Employee_Management.py
│   ├── __init__.py
│
│── reports/
│   ├── assets/
│   ├── screenshots/
│
│── firefoxdriver.exe
│── README.md
│── result.xml
│── report.html
```

---

## 3. Writing Test Cases

### 3.1 Basic Test Case

Create a simple test file in the `tests/` directory, for example, `test_sample.py`:

```python
def test_example():
    assert 1 + 1 == 2
```

Run the test using:

```sh
pytest tests/test_sample.py
```

### 3.2 Using Assertions

Pytest uses standard Python `assert` statements for validation:

```python
def test_string():
    message = "Hello Pytest"
    assert message.startswith("Hello")
```

### 3.3 Markers for Categorizing Tests

Markers help organize and execute specific test groups:

```python
import pytest

@pytest.mark.smoke
def test_smoke():
    assert 5 * 5 == 25

@pytest.mark.regression
def test_regression():
    assert "pytest" in "learning pytest framework"
```

Run only smoke tests:

```sh
pytest -m smoke
```

---

## 4. Configuring Pytest

### 4.1 `pytest.ini`

To configure global settings, create a `pytest.ini` file in the root directory:

```ini
[pytest]
testpaths = tests
addopts = -v --html=report.html --self-contained-html
markers =
    smoke: Smoke tests
    regression: Regression tests
```

### 4.2 `conftest.py` for Fixtures

Fixtures help in setting up preconditions for tests. Create a `conftest.py` file inside the `tests/` directory:

```python
import pytest

@pytest.fixture
def setup():
    print("Setting up test environment")
    yield
    print("Tearing down test environment")
```

Use the fixture in test cases:

```python
def test_example(setup):
    assert 10 - 5 == 5
```

---

## 5. Running Tests

Run all tests:

```sh
pytest
```

Run tests with detailed output:

```sh
pytest -v
```

Run a specific test file:

```sh
pytest tests/test_admin.py
```

Generate an HTML report:

```sh
pytest --html=report.html
```

---

## 6. Logging and Reporting

### 6.1 Logging

To capture logs, configure `pytest.ini`:

```ini
log_cli = true
log_cli_level = INFO
log_file = logfile.log
log_file_level = INFO
```

### 6.2 Allure Reporting

To generate advanced reports, install Allure:

```sh
pip install allure-pytest
```

Run tests with Allure reporting:

```sh
pytest --alluredir=reports/
```

Generate the HTML report:

```sh
allure serve reports/
```

---

## 7. Best Practices

1. **Use Fixtures Effectively:** Reduce code duplication by utilizing fixtures in `conftest.py`.
2. **Modularize Test Data:** Store test data separately in `TestData/` to enhance reusability.
3. **Use Page Object Model (POM):** Keep UI interactions in `pageObjects/` to improve maintainability.
4. **Categorize Tests with Markers:** Make test execution selective and structured.
5. **Generate Reports:** Always generate HTML/Allure reports for better visibility into test results.
6. **Automate Test Execution:** Integrate Pytest with CI/CD tools like Jenkins or GitHub Actions.

---

## Conclusion

Setting up Pytest for automation is straightforward when you follow a structured approach. From installation to execution, using best practices ensures efficiency and scalability. With the setup described here, you can build a robust, maintainable, and scalable test automation framework.

By leveraging Pytest's powerful features like fixtures, markers, and reporting, you can create a seamless testing workflow that enhances software quality.

---

I hope this guide helps you set up Pytest efficiently. If you have any questions or improvements, feel free to explore and experiment with different configurations!

